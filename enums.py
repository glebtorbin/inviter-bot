import enum


class URoles(enum.Enum):
    """ `User` roles `value = {'id':id, 'name':name}`"""
    ADMIN = {'id': 10, 'name': 'admin'}
    PENDING = {'id': 5, 'name': 'pending'}
    USER = {'id': 2, 'name': 'user'}


class InviteSessionResults(enum.Enum):
    CLOSED_MANUALLY = 1
    CLOSED_BY_FLOOD_WARNING = 2


class InviteSendResults(enum.Enum):
    SENT_NORMALLY = 1
    INVITE_RESTRICTED = 2


class CWorkes(enum.Enum):
    """ `Client` workes `value = {'id':id, 'name':name, 'answer':answer}` """
    UNWORKING = {'id': 1, 'name': 'unworking', 'answer': '–°–≤–æ–±–æ–¥–µ–Ω'}
    INVITING = {'id': 2, 'name': 'inviting', 'answer': '–ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤'}
    PARSING = {'id': 3, 'name': 'parsing', 'answer': '–ü–∞—Ä—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤'}
    MAILING = {'id': 4, 'name': 'mailing', 'answer': '–ó–∞–Ω—è—Ç —Ä–∞—Å—Å—ã–ª–∫–æ–π'}

    @classmethod
    def _missing_(cls, id):
        for work in cls:
            if work.value['id'] == id:
                return work
        return None


class CStatuses(enum.Enum):
    """ `Client` statuses `value = {'id':id, 'name':name, 'answer':answer, 'sticker': stiker}` """
    AUTHORIZED = {'id': 1, 'name': 'authorized', 'answer': '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'sticker': 'üü¢'}
    WAITING_AUTHORIZATION = {'id': 2, 'name': 'waiting_for_authorization', 'answer': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'sticker': 'üü°'}
    BANNED = {'id': 3, 'name': 'banned', 'answer': '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω', 'sticker': 'üî¥'}
    PAUSED = {'id': 4, 'name': 'paused', 'answer': '–ü–∞—É–∑–∞ (24—á)', 'sticker': 'üü†'}
    RESERVE = {'id': 5, 'name': 'reserve', 'answer': '–†–µ–∑–µ—Ä–≤', 'sticker': '‚ö™'}

    PROXY_ON = {'id': 1, 'name': 'ON', 'answer': '–ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω–æ','sticker': 'üü¢'}
    PROXY_OFF = {'id': 2, 'name': 'OFF', 'answer': '–ü—Ä–æ–∫—Å–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ','sticker': 'üü†'}
    PROXY_ERROR = {'id': 3, 'name': 'Error', 'answer': '–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏','sticker': 'üî¥'}
    PROXY_NONE = {'id': 4, 'name': 'None', 'answer': '–ü—Ä–æ–∫—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç','sticker': '‚ö´'}

    @classmethod
    def _missing_(cls, id):
        for status in cls:
            if status.value['id'] == id:
                return status
        return None


class CProxyStatuses(enum.Enum):
    """ `Client` statuses `value = {'id':id, 'name':name, 'answer':answer, 'sticker': stiker}` """
    PROXY_ON = {'id': 1, 'name': 'ON', 'answer': '–ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω–æ', 'sticker': 'üü¢'}
    PROXY_OFF = {'id': 2, 'name': 'OFF', 'answer': '–ü—Ä–æ–∫—Å–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ', 'sticker': 'üü†'}
    PROXY_ERROR = {'id': 3, 'name': 'Error', 'answer': '–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏', 'sticker': 'üî¥'}
    PROXY_NONE = {'id': 4, 'name': 'None', 'answer': '–ü—Ä–æ–∫—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'sticker': '‚ö´'}

    @classmethod
    def _missing_(cls, id):
        for status in cls:
            if status.value['id'] == id:
                return status
        return None


class WA_CWorkes(enum.Enum):
    """ `Client` workes `value = {'id':id, 'name':name, 'answer':answer}` """
    UNWORKING = {'id': 1, 'name': 'unworking', 'answer': '–°–≤–æ–±–æ–¥–µ–Ω'}
    CHECKING = {'id': 2, 'name': 'checking', 'answer': '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã'}
    MAILING = {'id': 3, 'name': 'mailing', 'answer': '–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ'}

    @classmethod
    def _missing_(cls, id):
        for work in cls:
            if work.value['id'] == id:
                return work
        return None


class WA_CStatuses(enum.Enum):
    """ `Client` statuses `value = {'id':id, 'name':name, 'answer':answer, 'sticker': stiker}` """
    AUTHORIZED = {'id': 1, 'name': 'authorized', 'answer': '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'sticker': 'üü¢'}
    WAITING_AUTHORIZATION = {'id': 2, 'name': 'waiting_for_authorization', 'answer': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'sticker': 'üü°'}
    BANNED = {'id': 3, 'name': 'banned', 'answer': '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω', 'sticker': 'üî¥'}

    @classmethod
    def _missing_(cls, id):
        for status in cls:
            if status.value['id'] == id:
                return status
        return None

class WA_Mailing_statuses(enum.Enum):
    """ `Client` statuses `value = {'id':id, 'name':name, 'answer':answer, 'sticker': stiker}` """
    
    UNWORKING = {'id': 1, 'name': 'unworking', 'answer': '–Ω–µ –∑–∞–ø—É—â–µ–Ω–∞'}
    WORKING = {'id': 2, 'name': 'working', 'answer': '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}
    FINISHED = {'id': 3, 'name': 'finished', 'answer': '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'}
    PAUSED = {'id': 4, 'name': 'paused', 'answer': '–Ω–∞ –ø–∞—É–∑–µ'}

    @classmethod
    def _missing_(cls, id):
        for status in cls:
            if status.value['id'] == id:
                return status
        return None

"""–°–∫—Ä–∏–ø—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π"""

# c_statuses = op.create_table('client_statuses',
# sa.Column('id', sa.Integer(), nullable=False),
# sa.Column('name', sa.String(length=50), nullable=False),
# sa.PrimaryKeyConstraint('id'),
# sa.UniqueConstraint('name'),
# comment='–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞'
# )

# op.bulk_insert(c_statuses, [{'id':status.value['id'],'name':status.value['name']} for status in CStatuses])

# c_workes = op.create_table('client_workes',
# sa.Column('id', sa.Integer(), nullable=False),
# sa.Column('name', sa.String(length=50), nullable=False),
# sa.PrimaryKeyConstraint('id'),
# sa.UniqueConstraint('name'),
# comment='–ß–µ–º –∑–∞–Ω—è—Ç –∞–∫–∫–∞—É–Ω—Ç'
# )

# op.bulk_insert(c_workes, [{'id':work.value['id'],'name':work.value['name']} for work in CWorkes])

# u_roles = op.create_table('user_role',
# sa.Column('id', sa.Integer(), nullable=False),
# sa.Column('name', sa.String(length=50), nullable=False),
# sa.PrimaryKeyConstraint('id'),
# sa.UniqueConstraint('name'),
# comment='–†–æ–ª—å —é–∑–µ—Ä–∞'
# )

# op.bulk_insert(u_roles, [{'id':role.value['id'],'name':role.value['name']} for role in URoles])
